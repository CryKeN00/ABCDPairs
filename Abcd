using System;
using System.IO;

class Program
{
    static void Main(string[] args) 
    {
        // Задаем путь к файлу, который нужно прочитать
        string filePath = "C:\\Users\\revno\\OneDrive\\Рабочий стол\\2 курс\\Sist_pr_21.txt";

        try // Начинаем блок try для обработки возможных исключений
        {
            // Читаем весь текст из указанного файла и сохраняем его в переменную c
            string textRead = File.ReadAllText(filePath); 
            // Вызываем метод GetMaxPairs(c) для нахождения максимального количества пар и сохраняем результат в maxPairs
            int maxPairs = GetMaxPairs(c);
            // Выводим результат на экран
            Console.WriteLine("ABCD подряд = " + maxPairs);
        }
        catch (Exception e) // Перехватываем любые исключения, возникшие в блоке try
        {
            // Выводим сообщение об ошибке на экран
            Console.WriteLine("ошибка: " + e.Message);
        }
    }

    // Метод для нахождения максимального количества последовательных пар "AB" или "CB"
    static int GetMaxPairs(string c) 
    {
        int maxPairs = 0; // Переменная для хранения максимального количества пар
        int cp = 0; // Переменная для подсчета текущего количества последовательных пар

        // Проходим по строке c, не доходя до последнего символа
        for (int i = 0; i < c.Length - 1; i++)
        {
            // Извлекаем подстроку длиной 2, начиная с позиции i
            string p = c.Substring(i, 2);

            // Проверяем, является ли подстрока "AB" или "CB"
            if (p == "AB" || p == "CB")
            {
                cp++; // Если да, увеличиваем счетчик текущих последовательных пар
                i++; // Пропускаем следующий символ, так как "пара" уже обработана
            }
            else // Если подстрока не соответствует заданным
            {
                // Обновляем максимальное количество пар, если текущие больше
                maxPairs = Math.Max(m, cp);
                cp = 0; // Сбрасываем счетчик текущих пар
            }
        }

        // Проверяем и обновляем максимальное значение пар в конце цикла
        maxPairs = Math.Max(m, cp);

        return maxPairs; // Возвращаем найденное максимальное количество пар
    }
}
